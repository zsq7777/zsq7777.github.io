import{_ as n,f as s}from"./app.01d44aa7.js";const a={},t=s(`<h1 id="_76-\u5982\u4F55\u5904\u7406optional\u7C7B\u578B" tabindex="-1"><a class="header-anchor" href="#_76-\u5982\u4F55\u5904\u7406optional\u7C7B\u578B" aria-hidden="true">#</a> 76. \u5982\u4F55\u5904\u7406OPTIONAL\u7C7B\u578B</h1><p>\u5E2E\u52A9\u6211\u4EEC\u505A\u8FD0\u884C\u65F6\u72B6\u6001\u7684\u5224\u65AD\uFF0C\u6BD4\u76F4\u63A5\u8FD4\u56DEstring,\u6216\u662Fbool\u503C\uFF0C\u66F4\u6CE8\u91CD\u8FD4\u56DE\u503C\u672C\u8EAB\u7684\u8BED\u4E49\u3002</p><p><strong>\u5E2E\u52A9\u5B58\u50A8\u53EF\u80FD\u5B58\u5728\uFF0C\u6216\u53EF\u80FD\u4E0D\u5B58\u5728\u7684\u503C\u3002</strong></p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;optional&gt;</span></span>

std<span class="token operator">::</span>optional<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">&gt;</span> <span class="token function">ReadFileAsString</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> filepath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	std<span class="token operator">::</span>ifstream <span class="token function">stream</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stream<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		std<span class="token operator">::</span>string result<span class="token operator">=</span><span class="token string">&quot;\u6B63\u5728\u8BFB\u53D6&quot;</span><span class="token punctuation">;</span>
		stream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> result<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token keyword">auto</span> data <span class="token operator">=</span> <span class="token function">ReadFileAsString</span><span class="token punctuation">(</span><span class="token string">&quot;data.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">has_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//\u6216\u662F\u4F7F\u7528 if(data)</span>
		std<span class="token operator">::</span>string<span class="token operator">&amp;</span> str <span class="token operator">=</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>
		std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span> <span class="token punctuation">{</span>
		std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\u6CA1\u8BFB\u5230&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>\u7531\u6B64\u53EF\u89C1\uFF0C\u5B83\u5F88\u9002\u5408\u5B58\u50A8\u5BF9\u4E8E\u8FD0\u884C\u72B6\u6001\u8FD9\u7C7B\u7684\u503C\u3002</p>`,5);function p(e,o){return t}var l=n(a,[["render",p]]);export{l as default};
