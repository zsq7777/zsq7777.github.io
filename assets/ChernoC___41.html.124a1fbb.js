import{_ as n,f as s}from"./app.fd59a98b.js";const a={},p=s(`<h1 id="_41-c-\u8FD0\u7B97\u7B26\u53CA\u8FD0\u7B97\u7B26\u91CD\u8F7D" tabindex="-1"><a class="header-anchor" href="#_41-c-\u8FD0\u7B97\u7B26\u53CA\u8FD0\u7B97\u7B26\u91CD\u8F7D" aria-hidden="true">#</a> 41. C++\u8FD0\u7B97\u7B26\u53CA\u8FD0\u7B97\u7B26\u91CD\u8F7D</h1><p>\u4E0D\u6B62\u6570\u5B66\u7684+\uFF0C-\uFF0Cx,/. \u8FD8\u6709\u524D\u9762\u7528\u8FC7\u7684 *test \u9006\u5411\u5F15\u7528, -&gt; \u7BAD\u5934\u8FD0\u7B97\u7B26,+,=, \u7528\u4E8E\u5185\u5B58\u5730\u5740\u7684&amp;\u8FD0\u7B97\u7B26,&lt;&lt;\u5DE6\u79FB\u8FD0\u7B97\u7B26,new,delete\u4E5F\u662F\u8FD0\u7B97\u7B26,&quot;,&quot;\u8FD0\u7B97\u7B26,&quot;[]&quot;&quot;()&quot;\u8FD0\u7B97\u7B26,\u90FD\u53EF\u4EE5\u662F\u8FD0\u7B97\u7B26\u3002</p><h2 id="\u91CD\u8F7D" tabindex="-1"><a class="header-anchor" href="#\u91CD\u8F7D" aria-hidden="true">#</a> \u91CD\u8F7D</h2><p>\u7ED9\u8FD0\u7B97\u7B26\u91CD\u8F7D\u8D4B\u4E88\u65B0\u7684\u542B\u4E49\uFF0C\u6216\u6DFB\u52A0\u53C2\u6570\uFF0C\u6216\u521B\u5EFA\uFF0C\u5141\u8BB8\u5728\u7A0B\u5E8F\u4E2D\u5B9A\u4E49\u6216\u66F4\u6539\u8FD0\u7B97\u7B26\u7684\u884C\u4E3A\u3002 Java\u4E0D\u652F\u6301 \uFF0CC#\u4E2D\u5F97\u5230\u652F\u6301\u3002</p><h2 id="\u8FD0\u7B97\u7B26\u5C31\u662F\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u8FD0\u7B97\u7B26\u5C31\u662F\u51FD\u6570" aria-hidden="true">#</a> \u8FD0\u7B97\u7B26\u5C31\u662F\u51FD\u6570</h2><p>\u5979\u4E0D\u7528\u7ED9\u51FA\u51FD\u6570\u540D\uFF0C\u53EF\u4EE5\u628A\u5B83\u4EA4\u7ED9&quot;+&quot;\u8FD9\u79CD\u8FD0\u7B97\u7B26\uFF0C\u4F1A\u8BA9\u6211\u4EEC\u7684\u4EE3\u7801\u66F4\u6574\u6D01\u5E72\u51C0\uFF0C\u66F4\u597D\u770B\uFF0C\u66F4\u6613\u4E8E\u9605\u8BFB\u3002</p><p>\u4F8B\u5982\uFF1A int+int \u53EF\u4EE5\u5F88\u660E\u663E\u770B\u51FA\u662F\u52A0\u6CD5\u8FD0\u7B97\uFF0C\u5BF9\u8FD9\u6837\u7684\u91CD\u8F7D\u5F88\u6709\u610F\u4E49\u3002</p><h3 id="\u5728java\u4E2D-\u6211\u4EEC\u53EA\u80FD\u8FD9\u4E48\u505A" tabindex="-1"><a class="header-anchor" href="#\u5728java\u4E2D-\u6211\u4EEC\u53EA\u80FD\u8FD9\u4E48\u505A" aria-hidden="true">#</a> \u5728Java\u4E2D\uFF0C\u6211\u4EEC\u53EA\u80FD\u8FD9\u4E48\u505A</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>


class Vector2 <span class="token punctuation">{</span>
private<span class="token operator">:</span>
	<span class="token keyword">float</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
public<span class="token operator">:</span>
	<span class="token function">Vector2</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	Vector2 <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vector2<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">Vector2</span><span class="token punctuation">(</span>x <span class="token operator">+</span> other<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> other<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	Vector2 <span class="token function">Multiply</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vector2<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">Vector2</span><span class="token punctuation">(</span>x <span class="token operator">*</span> other<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">*</span> other<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">void</span> <span class="token function">nowPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
		std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;--&quot;</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	Vector2 <span class="token function">position</span><span class="token punctuation">(</span><span class="token number">0.0f</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2 <span class="token function">move</span><span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token punctuation">,</span><span class="token number">1.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2 <span class="token function">speed</span><span class="token punctuation">(</span><span class="token number">0.5f</span><span class="token punctuation">,</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2 <span class="token function">powerup</span><span class="token punctuation">(</span><span class="token number">1.1f</span><span class="token punctuation">,</span> <span class="token number">1.1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2 result <span class="token operator">=</span>position<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>move<span class="token punctuation">.</span><span class="token function">Multiply</span><span class="token punctuation">(</span>speed<span class="token punctuation">.</span><span class="token function">Multiply</span><span class="token punctuation">(</span>powerup<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//result=position+move*speed*powerup  result=0.0+1.0*0.5*1.1</span>
	result<span class="token punctuation">.</span><span class="token function">nowPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="\u4F7F\u7528\u8FD0\u7B97\u7B26\u91CD\u8F7D" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u8FD0\u7B97\u7B26\u91CD\u8F7D" aria-hidden="true">#</a> \u4F7F\u7528\u8FD0\u7B97\u7B26\u91CD\u8F7D</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

class Vector2 <span class="token punctuation">{</span>
private<span class="token operator">:</span>
	<span class="token keyword">float</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
public<span class="token operator">:</span>
	<span class="token function">Vector2</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	Vector2 <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vector2<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">Vector2</span><span class="token punctuation">(</span>x <span class="token operator">+</span> other<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> other<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	Vector2 <span class="token function">Multiply</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vector2<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">Vector2</span><span class="token punctuation">(</span>x <span class="token operator">*</span> other<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">*</span> other<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	Vector2 operator<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vector2<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">Add</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	Vector2 operator<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vector2<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">void</span> <span class="token function">nowPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
		std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;--&quot;</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	Vector2 <span class="token function">position</span><span class="token punctuation">(</span><span class="token number">0.0f</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2 <span class="token function">move</span><span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token punctuation">,</span><span class="token number">1.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2 <span class="token function">speed</span><span class="token punctuation">(</span><span class="token number">0.5f</span><span class="token punctuation">,</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2 <span class="token function">powerup</span><span class="token punctuation">(</span><span class="token number">1.1f</span><span class="token punctuation">,</span> <span class="token number">1.1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2 result <span class="token operator">=</span>position<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>move<span class="token punctuation">.</span><span class="token function">Multiply</span><span class="token punctuation">(</span>speed<span class="token punctuation">.</span><span class="token function">Multiply</span><span class="token punctuation">(</span>powerup<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//result=position+move*speed*powerup  result=0.0+1.0*0.5*1.1</span>
	result<span class="token punctuation">.</span><span class="token function">nowPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	Vector2 result1 <span class="token operator">=</span> position <span class="token operator">+</span> move <span class="token operator">*</span> speed <span class="token operator">*</span> powerup<span class="token punctuation">;</span>
	result1<span class="token punctuation">.</span><span class="token function">nowPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h2 id="\u5DE6\u79FB\u8FD0\u7B97\u7B26" tabindex="-1"><a class="header-anchor" href="#\u5DE6\u79FB\u8FD0\u7B97\u7B26" aria-hidden="true">#</a> \u5DE6\u79FB\u8FD0\u7B97\u7B26</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>class Vector2 <span class="token punctuation">{</span>
public<span class="token operator">:</span>
	<span class="token keyword">float</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
	<span class="token function">Vector2</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	Vector2 <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vector2<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">Vector2</span><span class="token punctuation">(</span>x <span class="token operator">+</span> other<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> other<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	Vector2 <span class="token function">Multiply</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vector2<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">Vector2</span><span class="token punctuation">(</span>x <span class="token operator">*</span> other<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">*</span> other<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	Vector2 operator<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vector2<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">Add</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	Vector2 operator<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vector2<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>


<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//\u91CD\u8F7D\u5DE6\u79FB\u8FD0\u7B97\u7B26</span>
std<span class="token operator">::</span>ostream<span class="token operator">&amp;</span> operator<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token operator">::</span>ostream<span class="token operator">&amp;</span> stream<span class="token punctuation">,</span><span class="token keyword">const</span> Vector2<span class="token operator">&amp;</span> other<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
	stream <span class="token operator">&lt;&lt;</span> other<span class="token punctuation">.</span>x <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">&lt;&lt;</span> other<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
	<span class="token keyword">return</span> stream<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	Vector2 <span class="token function">position</span><span class="token punctuation">(</span><span class="token number">0.0f</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2 <span class="token function">move</span><span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token punctuation">,</span><span class="token number">1.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2 <span class="token function">speed</span><span class="token punctuation">(</span><span class="token number">0.5f</span><span class="token punctuation">,</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2 <span class="token function">powerup</span><span class="token punctuation">(</span><span class="token number">1.1f</span><span class="token punctuation">,</span> <span class="token number">1.1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2 result <span class="token operator">=</span>position<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>move<span class="token punctuation">.</span><span class="token function">Multiply</span><span class="token punctuation">(</span>speed<span class="token punctuation">.</span><span class="token function">Multiply</span><span class="token punctuation">(</span>powerup<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//result=position+move*speed*powerup  result=0.0+1.0*0.5*1.1</span>
	std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span>std<span class="token operator">::</span>endl<span class="token punctuation">;</span>

	Vector2 result1 <span class="token operator">=</span> position <span class="token operator">+</span> move <span class="token operator">*</span> speed <span class="token operator">*</span> powerup<span class="token punctuation">;</span>
	std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> result1 <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>\u8FD0\u7B97\u7B26\u53EA\u662F\u51FD\u6570\u7684\u8868\u73B0\u5F62\u5F0F\uFF0C\u53EF\u4EE5\u91CD\u8F7D\u8FD0\u7B97\u7B26\uFF0C\u53EF\u6839\u636E\u81EA\u5DF1\u7684\u9700\u8981\u5B9A\u4E49\u3002</p><p>\u5982\u9700\u8981\u5728\u5BF9\u5E94\u7684\u51FD\u6570\u5982,std::cout\u63A8\u6D41\u4E2D\u4F7F\u7528\uFF0C\u90A3\u4E48\u8FD0\u7B97\u7B26\u53C2\u6570\u5E94\u8BE5\u662Fostream\u3002</p><p>\u91CD\u8F7D\u8FD0\u7B97\u7B26\uFF1Aoperator+() \u8FD9\u6837\u7684\u7ED3\u6784\u3002</p><h2 id="bool\u8FD0\u7B97\u7B26" tabindex="-1"><a class="header-anchor" href="#bool\u8FD0\u7B97\u7B26" aria-hidden="true">#</a> bool\u8FD0\u7B97\u7B26</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

class Vector2 <span class="token punctuation">{</span>
public<span class="token operator">:</span>
	<span class="token keyword">float</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
	<span class="token function">Vector2</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	Vector2 <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vector2<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">Vector2</span><span class="token punctuation">(</span>x <span class="token operator">+</span> other<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> other<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	Vector2 <span class="token function">Multiply</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vector2<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">Vector2</span><span class="token punctuation">(</span>x <span class="token operator">*</span> other<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">*</span> other<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	Vector2 operator<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vector2<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">Add</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	Vector2 operator<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vector2<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">Multiply</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	bool operator<span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vector2<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//\u5B9A\u4E49==\u8FD0\u7B97\u7B26\u884C\u4E3A</span>
		<span class="token keyword">return</span> x <span class="token operator">==</span> other<span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> other<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	bool operator<span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vector2<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span> this <span class="token operator">==</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u8C03\u7528\u91CD\u8F7D\u7684==\u8FD0\u7B97\u7B26</span>
	<span class="token punctuation">}</span>


<span class="token punctuation">}</span><span class="token punctuation">;</span>

std<span class="token operator">::</span>ostream<span class="token operator">&amp;</span> operator<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token operator">::</span>ostream<span class="token operator">&amp;</span> stream<span class="token punctuation">,</span><span class="token keyword">const</span> Vector2<span class="token operator">&amp;</span> other<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
	stream <span class="token operator">&lt;&lt;</span> other<span class="token punctuation">.</span>x <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">&lt;&lt;</span> other<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
	<span class="token keyword">return</span> stream<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	Vector2 <span class="token function">position</span><span class="token punctuation">(</span><span class="token number">0.0f</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2 <span class="token function">move</span><span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token punctuation">,</span><span class="token number">1.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2 <span class="token function">speed</span><span class="token punctuation">(</span><span class="token number">0.5f</span><span class="token punctuation">,</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2 <span class="token function">powerup</span><span class="token punctuation">(</span><span class="token number">1.1f</span><span class="token punctuation">,</span> <span class="token number">1.1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Vector2 result <span class="token operator">=</span>position<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>move<span class="token punctuation">.</span><span class="token function">Multiply</span><span class="token punctuation">(</span>speed<span class="token punctuation">.</span><span class="token function">Multiply</span><span class="token punctuation">(</span>powerup<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//result=position+move*speed*powerup  result=0.0+1.0*0.5*1.1</span>
	std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span>std<span class="token operator">::</span>endl<span class="token punctuation">;</span>

	Vector2 result1 <span class="token operator">=</span> position <span class="token operator">+</span> move <span class="token operator">*</span> speed <span class="token operator">*</span> powerup<span class="token punctuation">;</span>
	std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> result1 <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>

	std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>move <span class="token operator">==</span> speed<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>
	std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>move <span class="token operator">!=</span> speed<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div>`,18);function t(o,e){return p}var l=n(a,[["render",t]]);export{l as default};
